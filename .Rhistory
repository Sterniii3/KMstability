install.packages("roxygen2")
Imports
Imports()
Depends()
?Imports
sessionInfo()
library(survminer)
library(survival)
sessionInfo()
Imports()
source('U:/KM_stability/stability_interval.R', encoding = 'UTF-8')
source('U:/KM_stability/stability_interval.R', encoding = 'UTF-8')
data <- data.frame(start_date = rep(0, 10), stop_date = c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), event = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1))
Figure1(data)
data <- data.frame(start_date = rep(0, 10), final_date = c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), event = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1))
Figure1(data)
data
KM <- survfit(Surv(difftime(final_date, start_date),
event) ~ 1,
type = "kaplan-meier",
conf.type = "log-log",
data = data)
difftime(final_date, start_date)
difftime(data$final_date, data$start_date)
as.Date(c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230))
c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230)
as.Date(15103, origin="1970-01-01")
as.Date(c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), origin="1970-01-01")
as.Date(c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), origin = "2022-01-01")
data <- data.frame(start_date = as.Date(rep(0, 10), origin = "2022-01-01"), final_date = as.Date(c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), origin = "2022-01-01"), event = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1))
Figure1(data)
@import KMstability
#' KMstability
#'
#' The KMstability package enables the investigation of the stability of the Kaplan-Meier estimate by the methods proposed by Betensky (2015) in a straight forward and easy way. It includes the generation of
#' detailed graphical presentations of the entire distribution via adequate Kaplan-Meier plots including confidence intervals and detailed life tables (function Figure1),
#' detailed graphical presentations of the alternative measure proposed by Betensky (function Figure2), as well as derived metrics (functions Table1, Figure4)
#' detailed graphical presentations of common measures of follow-up (i.e. time to censoring, observation time and observation time for those event-free) (function Figure3) and derived metrics (function Table4).
#'
#'
#' @docType package
#'
#' @author Stella Erdmann \email{erdmann@imbi.uni-heidelberg.de}
#'
#' @name KMstability
roxygen2::roxygenise(Figure1.R)
devtools::document()
rm(list = c("Figure1"))
devtools::document()
load.all()
loadall()
devtools::document()
rlang::last_error()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_vignette("introduction")
usethat::use_vignette("introduction")
install.packages("usethat")
usethat::use_vignette("introduction")
library(usethat)
library(usethis)
usethat::use_vignette("introduction")
devtools::load_all()
data <- data.frame(start_date = as.Date(rep(0, 10), origin = "2022-01-01"), final_date = as.Date(c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), origin = "2022-01-01"), event = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1))
devtools::use_data(data)
use_vignette("introduction")
devtools::load_all(".")
devtools::install("KMstability")
devtools::load_all(".")
library(haven)
data <- read_dta("S:/uni-hd/tlrc/Baum/neu/T3N0-Data.dta")
names(data) <- c("ArchivNr",     "gebdat",       "Gender",       "start_date",      "ECOG",         "final_date",         "event",
"ADJU"  ,       "R"    ,        "LK_ENT" ,      "resektion"   , "Seite"    ,    "Histologie"  , "t3All" ,
"age"   ,       "agetype"  ,   "pT3N0"    ,    "T3subroup"  ,  "Chemotherapy")
Figure1(data)
Figure2(data)
Figure3(data)
Figure4(data)
Table2(data)
Table1(data)
devtools::load_all(".")
Table1(data)
devtools::document()
devtools::load_all(".")
Table1(data)
Table2(data)
Figure1(data = data)
Figure2(data = data)
Figure3(data = data)
Figure4(data = data)
calculate_FU(data = )
calculate_FU(data)
################################################################################
# measures of follow-up as a measure of the stability of the KM estimator      #
################################################################################
dfC <- subset(data, event == 0)
data$time <- difftime(data$final_date,
data$start_date)
FU = data.frame(strata = c(rep("C", dim(data)[1]), # time to censoring
rep("T = min(X, C)", dim(data)[1]), # observation time
rep("C|C<X", dim(dfC)[1])), # time to censoring among those who are censored
time = c(data$time,
data$time,
dfC$time),
event = c((data$event-1)*(-1),
rep(1, dim(data)[1]),
(dfC$event-1)*(-1)))
c(rep("C", dim(data)[1]), # time to censoring
rep("T = min(X, C)", dim(data)[1]), # observation time
rep("C|C<X", dim(dfC)[1]))
c(data$time,
data$time,
dfC$time)
data$time
data$time
dfC$time
dfC
data$time
devtools::document()
devtools::load_all(".")
calculate_FU(data)
library(haven)
data <- read_dta("S:/uni-hd/tlrc/Baum/neu/T3N0-Data.dta")
names(data) <- c("ArchivNr",     "gebdat",       "Gender",       "start_date",      "ECOG",         "final_date",         "event",
"ADJU"  ,       "R"    ,        "LK_ENT" ,      "resektion"   , "Seite"    ,    "Histologie"  , "t3All" ,
"age"   ,       "agetype"  ,   "pT3N0"    ,    "T3subroup"  ,  "Chemotherapy")
calculate_FU(data)
calculate_stability(data)
Figure1(data)
Figure2(data)
Figure3(data)
Figure4(data)
Table1(data)
Table2(data)
data <- data.frame(start_date = as.Date(rep(0, 10), origin = "2022-01-01"), final_date = as.Date(c(120, 300, 500, 750, 290, 98, 167, 250, 734, 230), origin = "2022-01-01"), event = c(1, 1, 0, 1, 0, 1, 1, 0, 1, 1))
Table2(data)
Table1(data)
Table1(data)
Figure4(data)
Figure1(data)
Figure2(data)
Figure3(data)
runif(100, 0, 250)
round(runif(100, 0, 250))
rbinom(1, 100, 0.9)
rbinom(100, 1, 0.9)
data <- data.frame(start_date = as.Date(rep(0, 100), origin = "2022-01-01"),
final_date = as.Date(round(runif(100, 0, 250)), origin = "2022-01-01"),
event = rbinom(100, 1, 0.9))
Figure1(data)
Figure2(data)
Figure3(data)
Figure4(data)
Table1(data)
Table2(data)
devtools::load_all(".")
devtools::document()
if(!require(devtools)) { install.packages("devtools"); require(devtools)}
devtools::install_github("Sterniii3/drugdevelopR")
devtools::install_github("Sterniii3/drugdevelopR")
devtools::install_github("Sterniii3/KMstability")
library(KMstability)
library(roxygen2)
load("U:/KM_stability/KMstability_package/.RData")
devtools::load_all(".")
library(KMstability)
devtools::document()
devtools::install_github("Sterniii3/KMstability")
library(KMstability)
data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
as.Date(rep(0, 200), origin = "2022-01-01")),
final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
group = c(rep(0, 200), rep(1, 200)))
Figure1_group(data)
Figure2_group(data)
Figure3_group(data)
Table1_group(data)
Table2_group(data)
Figure2(data)
Figure1_group(data)
Figure2_group(data)
Figure2(data)
devtools::install_github("Sterniii3/KMstability", force=TRUE)
library(KMstability)
data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
as.Date(rep(0, 200), origin = "2022-01-01")),
final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
group = c(rep(0, 200), rep(1, 200)))
Figure1_group(data)
Figure2_group(data)
Figure3_group(data)
FU <- calculate_FU_group(data)
KM_FU <- survival::survfit(survival::Surv(time, event) ~ strata + group,
type = "kaplan-meier",
conf.type = "log-log",
data = FU)
survminer::ggsurvplot(KM_FU,
data = FU,
risk.table = TRUE,
conf.int = TRUE,
censor = TRUE,
palette = c("darkblue", "blue",
"black", "grey",
"darkred", "red"))
Table1_group(data)
Table2_group(data)
devtools::install_github("Sterniii3/KMstability")
devtools::install_github("Sterniii3/KMstability")
library(KMstability)
data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
as.Date(rep(0, 200), origin = "2022-01-01")),
final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
group = c(rep(0, 200), rep(1, 200)))
Figure1_group(data)
Figure2_group(data)
library(KMstability)
detach("package:KMstability", unload = TRUE)
devtools::install_github("Sterniii3/KMstability")
library(KMstability)
data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
as.Date(rep(0, 200), origin = "2022-01-01")),
final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
group = c(rep(0, 200), rep(1, 200)))
Figure1_group(data)
Figure1_group(data)
Figure2_group(data)
Figure3_group(data)
Table1_group(data)
detach("package:KMstability", unload = TRUE)
library(KMstability)
detach("package:KMstability", unload = TRUE)
#' calculate_stability_group
#'
#' help function to calculate the stability interval for the individual Kaplan Meier estimates in a group comparison
#'
#' @param data data.frame containing variables named start_date, final_date, event and group.
#'
#' @return data.frame object
#'
#' @examples
#' data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
#' as.Date(rep(0, 200), origin = "2022-01-01")),
#' final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
#'                as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
#' event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
#' group = c(rep(0, 200), rep(1, 200)))
#' calculate_stability_group(data)
#'
#' @export
calculate_stability_group <- function(data){
################################################################################
# stability interval = lower and upper limit for KM (Betensky, 2015)           #
################################################################################
# calculation of upper limit
# by "setting all censored observations to a value larger than the maximum event
# time (and retaining their status as censored)"
#-------------------------------------------------------------------------------
# maximum event time
data0 <- subset(data, group == 0)
data1 <- subset(data, group == 1)
# maximum_event_time <- ceiling(max(difftime(df$final_date,
#                                            df$start_date)))
maximum_event_time0 <- ceiling(max(difftime(data0$final_date,
data0$start_date)))
maximum_event_time1 <- ceiling(max(difftime(data1$final_date,
data1$start_date)))
# set all times of censored observations to the maximum event time
data0$timeupper <- difftime(data0$final_date,
data0$start_date)
data1$timeupper <- difftime(data1$final_date,
data1$start_date)
data0$timeupper[data0$event == 0] <- maximum_event_time0
data1$timeupper[data1$event == 0] <- maximum_event_time1
# calculation of lower limit
# by "coding all censored observations as events at the observed event times
# immediately following their censoring times"
#-------------------------------------------------------------------------------
# group = 0
data0$time <- difftime(data0$final_date,
data0$start_date, units = "days")
dfC <- subset(data0, event == 0)
dfE <- subset(data0, event == 1)
for(i in 1:length(dfC$time)){
# difference of censoring time of censor event i (Ci) and
# observed event times following this event (E): m = E - Ci
m <- ((dfE$time - dfC$time[i])[(dfE$time - dfC$time[i]) > 0])
if(length(m) > 0){
# replace time of censoring of event i with observed event time
# immediately following this event (Ei): Ci + min(m) = Ci + Ei - Ci = Ei
dfC$timelower[i] <- dfC$time[i] + min(m)
}else{
# if there is no event time following the censoring event i: no replacement?
dfC$timelower[i] <- dfC$time[i]
}
}
# keep times of events
dfE$timelower <- NA
dfE$timelower <- as.numeric(dfE$time)
data0 <- rbind(dfC, dfE)
# code all censored observations as events
data0$eventlower <- 1
# group = 1
data1$time <- difftime(data1$final_date,
data1$start_date, units = "days")
dfC <- subset(data1, event == 0)
dfE <- subset(data1, event == 1)
for(i in 1:length(dfC$time)){
# difference of censoring time of censor event i (Ci) and
# observed event times following this event (E): m = E - Ci
m <- ((dfE$time - dfC$time[i])[(dfE$time - dfC$time[i]) > 0])
if(length(m) > 0){
# replace time of censoring of event i with observed event time
# immediately following this event (Ei): Ci + min(m) = Ci + Ei - Ci = Ei
dfC$timelower[i] <- dfC$time[i] + min(m)
}else{
# if there is no event time following the censoring event i: no replacement?
dfC$timelower[i] <- dfC$time[i]
}
}
# keep times of events
dfE$timelower <- NA
dfE$timelower <- as.numeric(dfE$time)
data1 <- rbind(dfC, dfE)
# code all censored observations as events
data1$eventlower <- 1
data = rbind(data0, data1)
# data.frame containing information
DF = data.frame(measure = c(rep("KM estimate", dim(data)[1]),
rep("lower bound", dim(data)[1]),
rep("upper bound", dim(data)[1])),
time = c(data$time,
data$timelower,
data$timeupper),
event = c(data$event,
data$eventlower,
data$event),
group = c(data$group,
data$group,
data$group),
LT = c(rep("KM estimate", dim(data)[1]),
rep("limit", dim(data)[1]),
rep("limit", dim(data)[1])))
DF$measure <- factor(DF$measure, levels = c("upper bound",
"KM estimate",
"lower bound"))
return(DF)
}
DF <- calculate_stability_group(data)
KM_group <- survival::survfit(survival::Surv(time, event) ~ group + measure,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# Figure 2. Proposed upper and lower limits for Kaplan–Meier.
plot2_group <- survminer::ggsurvplot(KM_group,
data = DF,
risk.table = TRUE,
#  conf.int = TRUE,
censor = TRUE,
title = "",
legend = "none",
palette = c("lightblue3", "blue", "lightblue2",
"pink3", "red", "pink2"))
plot2_group
KM_group <- survival::survfit(survival::Surv(time, event) ~ group + measure,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
devtools::install_github("Sterniii3/KMstability")
library(KMstability)
data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
as.Date(rep(0, 200), origin = "2022-01-01")),
final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
group = c(rep(0, 200), rep(1, 200)))
Figure1_group(data)
Figure2_group(data)
Figure3_group(data)
Table1_group(data)
Table2_group(data)
library(KMstability)
library(KMstability)
