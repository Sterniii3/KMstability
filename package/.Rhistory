DC_plot(data) # Difference curve between upper and lower limits of Kaplan–Meier and partial difference curves between Kaplan–Meier and SI upper and lower limits.
KM_SI_tab(data)  # Quantile summaries of KM estimate and proposed upper and lower bounds of the stability interval with associated 95% confidence intervals (lower CI, upper CI).
FU_tab(data, pretty = FALSE)
xtable(KM_SI_tab(data))
install.packages("xtable")
library(xtable)
xtable(KM_SI_tab(data))
library(KMstability)
xtable(KM_SI_tab(data))
remove.packages("KMstability", lib="~/AppData/Local/R/win-library/4.2")
set.seed(41830619)
data <- data.frame(start_date = as.Date(rep(0, 100), origin = "2022-01-01"),
final_date = as.Date(round(runif(100, 0, 250)), origin = "2022-01-01"),
event = rbinom(100, 1, 0.9))
if(!require(devtools)) { install.packages("devtools"); require(devtools)}
devtools::install_github(repo = "Sterniii3/KMstability", subdir = "/package")
library(KMstability)
3
KM_plot(data) # Kaplan–Meier estimate of survivor function for overall survival, with 95% confidence intervals and numbers at risk.
SI_plot(data) # Stability interval: upper and lower limits for Kaplan–Meier estimate as proposed by Betensky (2015).
FU_plot(data) # Kaplan–Meier estimates of time to censoring, C, observation time, T, and time to censoring among those who are censored, C|C<X.
DC_plot(data) # Difference curve between stability interval upper and lower limits and partial difference curves between Kaplan–Meier and SI upper and lower limits.
KM_SI_tab(data)  # Quantile summaries of KM estimate and proposed upper and lower bounds of the stability interval with associated 95% confidence intervals (lower CI, upper CI).
FU_tab(data, pretty = FALSE)
KM_SI_tab(data)  # Quantile summaries of KM estimate and proposed upper and lower bounds of the stability interval with associated 95% confidence intervals (lower CI, upper CI).
FU_tab(data, pretty = T)
?KM_plot
?SI_plot
if(!require(devtools)) { install.packages("devtools"); require(devtools)}
devtools::install_github(repo = "Sterniii3/KMstability", subdir = "/package")
library(KMstability)
?SI_plot
roxygen2::roxygenise()
devtools::load_all()
rox#
roxygen2::roxygenise()
if(!require(devtools)) { install.packages("devtools"); require(devtools)}
devtools::install_github(repo = "Sterniii3/KMstability", subdir = "/package")
library(KMstability)
?SI_plot()
roxygen2::roxygenise()
roxygen2::roxygenise()
?SI_plot()
devtools::load_all()
roxygen2::roxygenise()
?FU_plot
roxygen2::roxygenise()
pkgload::dev_help('FU_plot')
roxygen2::roxygenise()
pkgload::dev_help('FU_plot')
devtools::load_all()
roxygen2::roxygenise()
pkgload::dev_help('FU_plot')
pkgload::dev_help('FU_plot_group')
pkgload::dev_help('FU_tab')
shiny::runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
data
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
library(readr)
data <- read_delim("P:/meth_ks/KM_stabilty/KMstability_software/application/data.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
View(data)
source("P:/meth_ks/KM_stabilty/KMstability_software/package/R/calculate_stability.R")
calculate_stability(data)
KM <- survfit(Surv(time, event) ~ strata,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
DF <- calculate_stability(data)
KM <- survfit(Surv(time, event) ~ strata,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# Figure 2. Proposed upper and lower limits for Kaplan–Meier.
plot2 <- ggsurvplot(KM,
data = DF,
risk.table = TRUE,
#  conf.int = TRUE,
censor = TRUE,
title = "",
legend = "none",
palette = c("gray50", "red", "gray51"))
# metrics derived from the upper and lower limits
#-------------------------------------------------------------------------------
# quantile summaries of limits:
frame <- as.data.frame(quantile(KM, probs = c(0.75, 0.5, 0.25), conf.int = TRUE))
names(frame) <- c("0.25quantile",
"median",
"0.75quantile",
"lower CI 0.25quantile",
"lower CI median",
"lower CI 0.75quantile",
"upper CI 0.25quantile",
"upper CI median",
"upper CI 0.75quantile")
row.names(frame) <- c("SI upper bound", "KM estimate", "SI lower bound")
frame_pretty <- cbind(c("SI upper bound", "KM estimate", "SI lower bound"),
t(t(paste0(frame$`0.25quantile`, " (",
frame$`lower CI 0.25quantile`, ",",
frame$`upper CI 0.25quantile`, ")"))),
t(t(paste0(frame$median, " (",
frame$`lower CI median`, ",",
frame$`upper CI median`, ")"))),
t(t(paste0(frame$`0.75quantile`, " (",
frame$`lower CI 0.75quantile`, ",",
frame$`upper CI 0.75quantile`, ")"))))
frame_pretty <- as.data.frame(frame_pretty)
names(frame_pretty)<- c("","0.25", "0.5", "0.75")
# difference curve between the upper and lower limits and the area under this curve,
# normalized by the maximum event time, to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- surv_summary(KM, data = DF)
DF_norm <- subset(DF_norm, time <= maximum_event_time)
maximum_event_time <- ceiling(max(difftime(data$final_date,
data$start_date)))
# difference curve between the upper and lower limits and the area under this curve,
# normalized by the maximum event time, to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- surv_summary(KM, data = DF)
DF_norm <- subset(DF_norm, time <= maximum_event_time)
keep <- as.numeric(names(which(table(DF_norm$time) == 3)))
DF_norm <- subset(DF_norm, time %in% keep)
time <- subset(DF_norm, strata == "SI upper bound")$time
diff_upper_lower <- subset(DF_norm, strata == "SI upper bound")$surv - subset(DF_norm, strata == "SI lower bound")$surv
f <- approxfun(time, diff_upper_lower, method = "constant")
auc <- integrate(f,
lower = min(time),
upper = max(time),
subdivisions = 10000L)
norm_auc <- auc$value/as.numeric(maximum_event_time)
plot(time, f(time), type = "l")
lines(time, diff_upper_lower, type = "p", col = "red")
# partial difference curves to indicate directional instability:
# the difference between the upper limit and the Kaplan–Meier estimate and
diff_upper_KM <- subset(DF_norm, strata == "SI upper bound")$surv - subset(DF_norm, strata == "KM estimate")$surv
# the difference between the Kaplan–Meier estimate and the lower limit.
diff_KM_lower <- subset(DF_norm, strata == "KM estimate")$surv - subset(DF_norm, strata == "SI lower bound")$surv
# Figure 4. Difference curve between upper and lower limits of Kaplan–Meier
# and partial difference curves between Kaplan–Meier and upper and lower limits.
DF4 <- data.frame(time = c(time, time, time),
strata = c(rep("SI upper limit minus SI lower limit", length(time)),
rep("SI upper limit minus KM estmate", length(time)),
rep("KM estimate minus SI lower limit", length(time))),
Probability = c(diff_upper_lower,
diff_upper_KM,
diff_KM_lower))
DF4$strata <- factor(DF4$strata, levels = c("SI upper limit minus SI lower limit",
"SI upper limit minus KM estmate",
"KM estimate minus SI lower limit"))
plot4 <- ggplot(data = DF4,
aes(x = time, y = Probability, group = strata)) +
# ggtitle("Difference curve between upper and lower limits of the stability interval and partial difference curves between Kaplan–Meier estimate and SI upper and lower limits") +
geom_line(aes(linetype = strata)) +
scale_linetype_manual(name="", values = c("solid", "dashed", "dotted"),
labels=c(paste0("SI upper limit - SI lower limit;\n normalized auc = ",
round(norm_auc, 2 )),
"SI upper limit - KM estmate",
"KM estimate - SI lower limit")) +
theme_survminer()
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
################################################################################
# measures of follow-up as a measure of the stability of the KM estimator      #
################################################################################
dfC <- subset(data, event == 0)
FU = data.frame(strata = c(rep("C", dim(data)[1]), # time to censoring
rep("T = min(X, C)", dim(data)[1]), # observation time
rep("C|C<X", dim(dfC)[1])), # observation time among those who are censored
time = c(data$time,
data$time,
dfC$time),
event = c(1 - data$event,
rep(1, dim(data)[1]),
rep(1, dim(dfC)[1])))
head(data)
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
DF <- calculate_stability(data)
KM <- survival::survfit(survival::Surv(time, event) ~ strata,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# difference curve between the upper and lower limits and
# the area under this curve, normalized by the maximum event time,
# to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- survminer::surv_summary(KM, data = DF)
# maximum event time
df <- subset(data, event == 1)
maximum_event_time <- ceiling(max(difftime(df$final_date,
df$start_date)))
DF_norm <- subset(DF_norm, time <= maximum_event_time)
keep    <- as.numeric(names(which(table(DF_norm$time) == 3)))
DF_norm <- subset(DF_norm, time %in% keep) # keep only observations where differences can be calculated
time    <- subset(DF_norm, strata == "upper bound")$time
diff_upper_lower <- subset(DF_norm,strata == "upper bound")$surv -
subset(DF_norm, strata == "lower bound")$surv
f       <- approxfun(time, diff_upper_lower, method = "constant")
time
subset(DF_norm, strata == "upper bound")$time
subset(DF_norm, time <= maximum_event_time)
DF_norm <- subset(DF_norm, time <= maximum_event_time)
keep    <- as.numeric(names(which(table(DF_norm$time) == 3)))
DF_norm <- subset(DF_norm, time %in% keep) # keep only observations where differences can be calculated
DF_norm
time    <- subset(DF_norm, strata == "SI upper bound")$time
time
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
plot4 <- plot("", "")
plot4
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
library(KMstability)
set.seed(41830619)
data <- data.frame(start_date = c(as.Date(rep(0, 200), origin = "2022-01-01"),
as.Date(rep(0, 200), origin = "2022-01-01")),
final_date = c(as.Date(round(runif(200, 0, 250)), origin = "2022-01-01"),
as.Date(round(runif(200, 0, 450)), origin = "2022-01-01")),
event = c(rbinom(200, 1, 0.9), rbinom(200, 1, 0.9)),
group = c(rep(0, 200), rep(1, 200)))
write.csv2(data, "data_group.csv")
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
DF <- calculate_stability(data)
KM <- survival::survfit(survival::Surv(time, event) ~ strata + group,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
head(data)
DF <- calculate_stability_group(data)
KM <- survival::survfit(survival::Surv(time, event) ~ strata + group,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
DF
DF <- calculate_stability_group(data)
KM <- survival::survfit(survival::Surv(time, event) ~ measure + group,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# difference curve between the upper and lower limits and
# the area under this curve, normalized by the maximum event time,
# to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- survminer::surv_summary(KM, data = DF)
DF_norm
DF <- calculate_stability_group(data)
KM <- survival::survfit(survival::Surv(time, event) ~ measure + group,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# difference curve between the upper and lower limits and
# the area under this curve, normalized by the maximum event time,
# to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- survminer::surv_summary(KM, data = DF)
DF_norm0 <- subset(DF_norm, group == 0)
DF_norm1 <- subset(DF_norm, group == 1)
# maximum event time
# maximum event time
data0 <- subset(data, group == 0)
data1 <- subset(data, group == 1)
maximum_event_time0 <- ceiling(max(data0$time))
data0
DF <- calculate_stability_group(data)
KM <- survival::survfit(survival::Surv(time, event) ~ measure + group,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# difference curve between the upper and lower limits and
# the area under this curve, normalized by the maximum event time,
# to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- survminer::surv_summary(KM, data = DF)
DF_norm0 <- subset(DF_norm, group == 0)
DF_norm1 <- subset(DF_norm, group == 1)
# maximum event time
# maximum event time
data0 <- subset(data, group == 0)
data1 <- subset(data, group == 1)
maximum_event_time0 <- ceiling(max(difftime(data0$final_date,
data0$start_date)))
maximum_event_time1 <- ceiling(max(difftime(data1$final_date,
data1$start_date)))
DF_norm0 <- subset(DF_norm0, time <= maximum_event_time0)
keep0    <- as.numeric(names(which(table(DF_norm0$time) == 3)))
DF_norm0 <- subset(DF_norm0, time %in% keep0) # keep only observations where differences can be calculated
time0    <- subset(DF_norm0, strata == "SI upper bound")$time
diff_upper_lower0 <- subset(DF_norm0,strata == "SI upper bound")$surv -
subset(DF_norm0, strata == "SI lower bound")$surv
f0       <- approxfun(time, diff_upper_lower0, method = "constant")
f0       <- approxfun(time0, diff_upper_lower0, method = "constant")
time0
DF_norm0
DF_norm$strata
DF <- calculate_stability_group(data)
KM <- survival::survfit(survival::Surv(time, event) ~ measure + group,
type = "kaplan-meier",
conf.type = "log-log",
data = DF)
# difference curve between the upper and lower limits and
# the area under this curve, normalized by the maximum event time,
# to range between 0 (complete stability) and 1 (complete instability)
DF_norm <- survminer::surv_summary(KM, data = DF)
DF_norm0 <- subset(DF_norm, group == 0)
DF_norm1 <- subset(DF_norm, group == 1)
# maximum event time
# maximum event time
data0 <- subset(data, group == 0)
data1 <- subset(data, group == 1)
maximum_event_time0 <- ceiling(max(difftime(data0$final_date,
data0$start_date)))
maximum_event_time1 <- ceiling(max(difftime(data1$final_date,
data1$start_date)))
DF_norm0 <- subset(DF_norm0, time <= maximum_event_time0)
keep0    <- as.numeric(names(which(table(DF_norm0$time) == 3)))
DF_norm0 <- subset(DF_norm0, time %in% keep0) # keep only observations where differences can be calculated
time0    <- subset(DF_norm0, strata == "measure=SI upper bound, group=0")$time
diff_upper_lower0 <- subset(DF_norm0,strata == "measure=SI upper bound, group=0")$surv -
subset(DF_norm0, strata == "measure=SI lower bound, group=0")$surv
f0       <- approxfun(time0, diff_upper_lower0, method = "constant")
auc0     <- integrate(f0,
lower = min(time0),
upper = max(time0),
subdivisions = 10000L)
norm_auc0 <- auc0$value/as.numeric(maximum_event_time0)
DF_norm1 <- subset(DF_norm1, time <= maximum_event_time1)
keep1    <- as.numeric(names(which(table(DF_norm1$time) == 3)))
DF_norm1 <- subset(DF_norm1, time %in% keep1) # keep only observations where differences can be calculated
time1    <- subset(DF_norm1, strata == "measure=SI upper bound, group=1")$time
diff_upper_lower1 <- subset(DF_norm1,strata == "measure=SI upper bound, group=1")$surv -
subset(DF_norm1, strata == "measure=SI lower bound, group=1")$surv
f1       <- approxfun(time1, diff_upper_lower1, method = "constant")
auc1     <- integrate(f1,
lower = min(time1),
upper = max(time1),
subdivisions = 10000L)
norm_auc1 <- auc1$value/as.numeric(maximum_event_time1)
# partial difference curves to indicate directional instability:
# the difference between the upper limit and the Kaplan–Meier estimate and
diff_upper_KM0 <- subset(DF_norm0, strata == "measure=SI upper bound, group=0")$surv -
subset(DF_norm0, strata == "KM estimate")$surv
# the difference between the Kaplan–Meier estimate and the lower limit.
diff_KM_lower0 <- subset(DF_norm0, strata == "KM estimate")$surv -
subset(DF_norm0, strata == "measure=SI lower bound, group=0")$surv
diff_upper_KM1 <- subset(DF_norm1, strata == "measure=SI upper bound, group=0")$surv -
subset(DF_norm1, strata == "KM estimate")$surv
# the difference between the Kaplan–Meier estimate and the lower limit.
diff_KM_lower1 <- subset(DF_norm1, strata == "KM estimate")$surv -
subset(DF_norm1, strata == "measure=SI lower bound, group=0")$surv
# Figure 4. Difference curve between upper and lower limits of Kaplan–Meier
# and partial difference curves between Kaplan–Meier and upper and lower limits
# (compare Figure 4 in Betensky (2015))
DF4 <- data.frame(time = c(time0, time0, time0, time1, time1, time1),
strata = c(rep("0: SI upper limit minus SI lower limit", length(time0)),
rep("0: SI upper limit minus KM estmate", length(time0)),
rep("0: KM estimate minus SI lower limit", length(time0)),
rep("1: SI upper limit minus SI lower limit", length(time1)),
rep("1: SI upper limit minus KM estmate", length(time1)),
rep("1: KM estimate minus SI lower limit", length(time1))),
Probability = c(diff_upper_lower0,
diff_upper_KM0,
diff_KM_lower0,
diff_upper_lower1,
diff_upper_KM1,
diff_KM_lower1))
DF4$strata <- factor(DF4$strata, levels = c("0: SI upper limit minus SI lower limit",
"0: SI upper limit minus KM estmate",
"0: KM estimate minus SI lower limit",
"1: SI upper limit minus SI lower limit",
"1: SI upper limit minus KM estmate",
"1: KM estimate minus SI lower limit"))
plot4 <- ggplot2::ggplot(data = DF4,
ggplot2::aes(x = time,
y = Probability,
group = strata)) +
# ggplot2::ggtitle("Difference curve between upper and lower limits of Kaplan–Meier and partial difference curves between Kaplan–Meier and upper and lower limits") +
ggplot2::geom_line(ggplot2::aes(linetype = strata)) +
ggplot2::scale_linetype_manual(name="", values = c("solid",
"dashed",
"dotted"),
labels=c(paste0("SI upper limit - SI lower limit;\n normalized auc = ",
round(norm_auc, 2 )),
"SI upper limit - KM estmate",
"KM estimate - SI lower limit")) +
survminer::theme_survminer()
plot4
plot4 <- ggplot2::ggplot(data = DF4,
ggplot2::aes(x = time,
y = Probability,
group = strata)) +
# ggplot2::ggtitle("Difference curve between upper and lower limits of Kaplan–Meier and partial difference curves between Kaplan–Meier and upper and lower limits") +
ggplot2::geom_line(ggplot2::aes(linetype = strata)) +
ggplot2::scale_linetype_manual(name="", values = c("solid",
"dashed",
"dotted",
"solid",
"dashed",
"dotted"),
labels=c(paste0("0: SI upper limit - SI lower limit;\n normalized auc0 = ",
round(norm_auc0, 2 )),
"0: SI upper limit - KM estmate",
"0: KM estimate - SI lower limit",
paste0("1: SI upper limit - SI lower limit;\n normalized auc1 = ",
round(norm_auc1, 2 )),
"1: SI upper limit - KM estmate",
"1: KM estimate - SI lower limit")) +
survminer::theme_survminer()
plot4
ggplot2::ggplot(data = DF4,
ggplot2::aes(x = time,
y = Probability,
group = strata)) +
# ggplot2::ggtitle("Difference curve between upper and lower limits of Kaplan–Meier and partial difference curves between Kaplan–Meier and upper and lower limits") +
ggplot2::geom_line(ggplot2::aes(linetype = strata))
plot4 <- ggplot2::ggplot(data = DF4,
ggplot2::aes(x = time,
y = Probability,
group = strata)) +
# ggplot2::ggtitle("Difference curve between upper and lower limits of Kaplan–Meier and partial difference curves between Kaplan–Meier and upper and lower limits") +
ggplot2::geom_line(ggplot2::aes(linetype = strata, color = group)) +
ggplot2::scale_linetype_manual(name="", values = c("solid",
"dashed",
"dotted",
"solid",
"dashed",
"dotted"),
labels=c(paste0("0: SI upper limit - SI lower limit;\n normalized auc0 = ",
round(norm_auc0, 2 )),
"0: SI upper limit - KM estmate",
"0: KM estimate - SI lower limit",
paste0("1: SI upper limit - SI lower limit;\n normalized auc1 = ",
round(norm_auc1, 2 )),
"1: SI upper limit - KM estmate",
"1: KM estimate - SI lower limit")) +
survminer::theme_survminer()
plot4
DF4
# Figure 4. Difference curve between upper and lower limits of Kaplan–Meier
# and partial difference curves between Kaplan–Meier and upper and lower limits
# (compare Figure 4 in Betensky (2015))
DF4 <- data.frame(time = c(time0, time0, time0, time1, time1, time1),
group = c(rep(0, length(time0)),
rep(0, length(time0)),
rep(0, length(time0)),
rep(1, length(time1)),
rep(1, length(time1)),
rep(1, length(time1)))
strata = c(rep("0: SI upper limit minus SI lower limit", length(time0)),
# Figure 4. Difference curve between upper and lower limits of Kaplan–Meier
# and partial difference curves between Kaplan–Meier and upper and lower limits
# (compare Figure 4 in Betensky (2015))
DF4 <- data.frame(time = c(time0, time0, time0, time1, time1, time1),
group = c(rep(0, length(time0)),
rep(0, length(time0)),
rep(0, length(time0)),
rep(1, length(time1)),
rep(1, length(time1)),
rep(1, length(time1))),
strata = c(rep("0: SI upper limit minus SI lower limit", length(time0)),
rep("0: SI upper limit minus KM estmate", length(time0)),
rep("0: KM estimate minus SI lower limit", length(time0)),
rep("1: SI upper limit minus SI lower limit", length(time1)),
rep("1: SI upper limit minus KM estmate", length(time1)),
rep("1: KM estimate minus SI lower limit", length(time1))),
Probability = c(diff_upper_lower0,
diff_upper_KM0,
diff_KM_lower0,
diff_upper_lower1,
diff_upper_KM1,
diff_KM_lower1))
DF4$strata <- factor(DF4$strata, levels = c("0: SI upper limit minus SI lower limit",
"0: SI upper limit minus KM estmate",
"0: KM estimate minus SI lower limit",
"1: SI upper limit minus SI lower limit",
"1: SI upper limit minus KM estmate",
"1: KM estimate minus SI lower limit"))
plot4 <- ggplot2::ggplot(data = DF4,
ggplot2::aes(x = time,
y = Probability,
group = strata)) +
# ggplot2::ggtitle("Difference curve between upper and lower limits of Kaplan–Meier and partial difference curves between Kaplan–Meier and upper and lower limits") +
ggplot2::geom_line(ggplot2::aes(linetype = strata, color = group)) +
ggplot2::scale_linetype_manual(name="", values = c("solid",
"dashed",
"dotted",
"solid",
"dashed",
"dotted"),
labels=c(paste0("0: SI upper limit - SI lower limit;\n normalized auc0 = ",
round(norm_auc0, 2 )),
"0: SI upper limit - KM estmate",
"0: KM estimate - SI lower limit",
paste0("1: SI upper limit - SI lower limit;\n normalized auc1 = ",
round(norm_auc1, 2 )),
"1: SI upper limit - KM estmate",
"1: KM estimate - SI lower limit")) +
survminer::theme_survminer()
plot4
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
load_all()
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
if(!require(devtools)) { install.packages("devtools"); require(devtools)}
devtools::install_github(repo = "Sterniii3/KMstability", subdir = "/package")
library(KMstability)
runApp('P:/meth_ks/KM_stabilty/KMstability_software/application')
