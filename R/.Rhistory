data1$Jahr[grepl("2021", data1$Monat)] <- 2021
save(data1, file="P:/stat_mod/Projekte/Sentinel Surveillance/longauswertung/neue_Daten/data1.Rdata")
library(readr)
Pop<-pop<- NULL
BMonat <- c("2021_02",
"2021_03",
"2021_04",
"2021_05",
"2021_06",
"2021_07",
"2021_08",
"2021_09",
"2021_10",
"2021_11",
"2021_12",
"2022_01",
"2022_02",
"2022_03",
"2022_04",
"2022_05",
"2022_06",
"2022_07",
"2022_08",
"2022_09",
"2022_10",
"2022_11",
"2022_12",
"2023_01",
"2023_02",
"2023_03",
"2023_04",
"2023_05",
"2023_06",
"2018_08",
"2018_09",
"2018_10",
"2018_11",
"2019_06",
"2019_07",
"2019_08",
"2019_09",
"2019_10",
"2019_11",
"2019_12",
"2020_01",
"2020_02",
"2020_03",
"2020_04",
"2020_05",
"2020_06",
"2020_07",
"2020_09",
"2020_10",
"2020_11",
"2020_12",
"2021_01")
for(j in 1:length(BMonat)){
for(i in 1:9){
pop <- NULL
try({
pop <- read_csv(paste0("P:/stat_mod/Projekte/Sentinel Surveillance/longauswertung/neue_Daten/Belegungzahlen/",BMonat[j],"/survey (",i,").csv"))
}, silent = TRUE)
if(!is.null(pop)){
K <- which(grepl("^Bitte geben Sie den Namen der Einrichtung an, für die Sie Daten eingeben möchten", names(pop)))
Einr <- NULL
for(k in K){
x <- pop[,k]
names(x) <- "Einrichtung"
Einr <- rbind(Einr, x)
}
K <- which(grepl("^Gesamtbewohnerzahl in der Einrichtung an diesem Tag", names(pop)))
N <- NULL
for(k in K){
x <- pop[,k]
names(x) <- "n"
N <- rbind(N, x)
}
K <- which(grepl("^Anzahl der weiblichen Bewohner unter 18 Jahren an diesem Tag", names(pop)))
WK <- NULL
for(k in K){
x <- pop[,k]
names(x) <- "Weiblich_Kind"
WK <- rbind(WK, x)
}
K <- which(grepl("^Anzahl der weiblichen, erwachsenen Bewohner an diesem Tag", names(pop)))
WE <- NULL
for(k in K){
x <- pop[,k]
names(x) <- "Weiblich_Erwachsen"
WE <- rbind(WE, x)
}
K <- which(grepl("^Anzahl männlicher Bewohner unter 18 Jahren an diesem Tag", names(pop)))
MK <- NULL
for(k in K){
x <- pop[,k]
names(x) <- "Maennlich_Kind"
MK <- rbind(MK, x)
}
K <- which(grepl("^Anzahl der männlichen, erwachsenen Bewohner an diesem Tag", names(pop)))
ME <- NULL
for(k in K){
x <- pop[,k]
names(x) <- "Maennlich_Erwachsen"
ME <- rbind(ME, x)
}
popi <- data.frame(time = rep(pop$`Datum Abgeschickt`, times=length(K)),
Einrichtung = Einr,
n_pop = N,
Weiblich_Kind = WK,
Weiblich_Erwachsen = WE,
Maennlich_Kind = MK,
Maennlich_Erwachsen = ME,
Ordner = BMonat[j],
Datei = i)
Pop <- rbind(Pop,popi)
}
}
}
# Pop <- subset(Pop,!is.na(n))
names(Pop)[names(Pop)=="n"] <- "n_pop"
Pop$Monat <- format(Pop$time, "%Y %m ")
#Pop$time <-NULL
M <- unique(Pop$Monat)
E <- unique(Pop$Einrichtung)
z <- 0
POP <- NULL
for(j in M){
for(i in E){
popi      <- subset(Pop, Einrichtung==i&Monat==j)[, -c(9,8)]
if(dim(popi)[1]>0){
popi$nas  <- rowSums(is.na(popi))
popi      <- subset(popi, nas == min(popi$nas))
popii      <- unique(popi)
if(dim(popii)[1]>1){
print(popii)
z <- z + 1
#popi      <- subset(popi, time == max(popi$time))[1,]
popii <- data.frame(time = mean(popii$time),
Einrichtung = popii$Einrichtung[1],
n_pop = round(mean(popii$n_pop)),
Weiblich_Kind = round(mean(popii$Weiblich_Kind)),
Weiblich_Erwachsen = round(mean(popii$Weiblich_Erwachsen)),
Maennlich_Kind = round(mean(popii$Maennlich_Kind)),
Maennlich_Erwachsen = round(mean(popii$Maennlich_Erwachsen)),
Monat = popii$Monat[1],
nas = popii$nas[1])
print("###################")
}
POP <- rbind(POP,popii)
}
}
}
POP <- subset(POP, nas!=5)
POP <- POP[with(POP, order(Einrichtung, Monat)), ]
POP <- subset(POP, n_pop > 0)
POP <- POP[complete.cases(POP),]
POP$MaennlichApop <- (POP$Maennlich_Erwachsen+POP$Maennlich_Kind)/POP$n_pop
POP$ErwachsenApop <- (POP$Maennlich_Erwachsen+POP$Weiblich_Erwachsen)/POP$n_pop
POP$WeiblichApop <- (POP$Weiblich_Erwachsen+POP$Weiblich_Kind)/POP$n_pop
POP$KindApop <- (POP$Maennlich_Kind+POP$Weiblich_Kind)/POP$n_pop
POP$MaennlichApop = POP$MaennlichApop*100
POP$ErwachsenApop = POP$ErwachsenApop*100
POP$MaennlichApop10 = POP$MaennlichApop/10
POP$ErwachsenApop10 = POP$ErwachsenApop/10
namen <- c(unique(POP$Einrichtung), Einrichtungen)
table(namen)
unique(POP$Einrichtung)
POP$Einrichtungsname_vorher <- POP$Einrichtung
POP <- subset(POP, Einrichtung != "AHE Flughafen München" & # rauslassen, da Abschiebehaft
Einrichtung != "GU"& # rauslassen, da Gemeinschaftsunterkunft
Einrichtung != "Erlöserschwestern"& # rauslassen, da Gemeinschaftsunterkunft
Einrichtung != "Zellerau"  # rauslassen, da Gemeinschaftsunterkunft
)
POP$Einrichtung[POP$Einrichtung=="Patrick Henry Village"] <- "HD_PHV"
POP$Einrichtung[POP$Einrichtung=="EA Lotte-Branz Straße"] <- "Lotte_Branz_Straße"
POP$Einrichtung[POP$Einrichtung=="Industriestraße"] <- "MA_Industriestraße"
POP$Einrichtung[POP$Einrichtung=="Spinelli"] <- "MA_Spinelli"
POP$Einrichtung[POP$Einrichtung=="Funkkaserne München"] <- "MU_Funkkaserne"
POP$Einrichtung[POP$Einrichtung=="Ledward-Barracks"] <- "Schweinfurt"
POP$Einrichtung[POP$Einrichtung=="EA Tompkin Barracks"] <- "Schwetzingen"
POP$Einrichtung[POP$Einrichtung=="?"] <- "Stephansposching" # OK Da keine Daten
POP$Einrichtung[POP$Einrichtung=="?"] <- "Waldkraiburg" # OK da keine Daten
POP$Einrichtung[POP$Einrichtung=="LEA Lörracher Straße 6"|POP$Einrichtung=="LEA Müllheimer Str."] <- "Freiburg"
POP$Einrichtung[POP$Einrichtung=="EA Durlacher Allee"] <- "Durlacher_Allee"
POP$Einrichtung[POP$Einrichtung=="Fürstenfeldbruck"] <- "Fuerstenfeldbruck"
POP$Einrichtung[POP$Einrichtung=="Ankunftszentrum"] <- "HH_HH"
POP$Einrichtung[POP$Einrichtung=="Poststraße"] <- "HH_Poststraße"
POP$Einrichtung[POP$Einrichtung=="Sportallee"] <- "HH_Sportallee"
POP$Einrichtung[POP$Einrichtung=="?"] <- "Ingolstadt" # OK da keine Daten
POP$Einrichtung[POP$Einrichtung=="EA Durlacher Allee"] <- "Durlacher_Allee"
POP$Einrichtung[POP$Einrichtung=="AE Abrams"] <- "Garmisch-Partenkirchen"
POP$Einrichtung[POP$Einrichtung=="Eggenstein Leopoldshafen"] <- "KA_Eggenstein"
POP$Einrichtung[POP$Einrichtung=="Felsstr. KA"] <- "KA_Felsstraße"
POP$Einrichtung[POP$Einrichtung=="Musenbergstr."] <- "Musenbergstraße"
POP$type_of_center <- "?"
for (i in 1:dim(POP)[1]) {
if (POP$Einrichtung[i] == "HD_PHV"|
POP$Einrichtung[i] == "HH_HH"|
POP$Einrichtung[i] == "Lotte_Branz_Straße"|
POP$Einrichtung[i] == "Durlacher_Allee"|
POP$Einrichtung[i] == "Maria-Probst-Str."|
POP$Einrichtung[i] == "Schwetzingen"){
POP$type_of_center[i] = "REG"
}
if (POP$Einrichtung[i] ==
"Schweinfurt"|
POP$Einrichtung[i] ==
"Ingolstadt"|
POP$Einrichtung[i] ==
"Deggendorf"|
POP$Einrichtung[i] ==
"MA_Industriestraße"|
POP$Einrichtung[i] ==
"MA_Spinelli"|
POP$Einrichtung[i] ==
"Moosfeld"|
POP$Einrichtung[i] ==
"MU_Funkkaserne"|
POP$Einrichtung[i] ==
"Osterhofen"|
POP$Einrichtung[i] ==
"Stephansposching"|
POP$Einrichtung[i] ==
"Waldkraiburg"|
POP$Einrichtung[i] ==
"Freiburg"|
POP$Einrichtung[i] ==
"Fuerstenfeldbruck"|
POP$Einrichtung[i] ==
"Hengersberg"|
POP$Einrichtung[i] ==
"HH_Poststraße"|
POP$Einrichtung[i] ==
"HH_Sportallee"|
POP$Einrichtung[i] ==
"Garmisch-Partenkirchen"|
POP$Einrichtung[i] ==
"EA Tübingen"){
POP$type_of_center[i] = "REC"
}
}
namen <- c(unique(POP$Einrichtung), Einrichtungen)
table(namen)[table(namen)==1]
Times <- data.frame(time = c(data1$time), Monat = c(data1$Monat))
zuordnung <- unique(Times)
for (i in 1:dim(zuordnung)[1]) {
POP$timef[POP$Monat == zuordnung$Monat[i]] <- zuordnung$time[i]
}
POP$timef <- factor(POP$timef)
Labels = data.frame(center = c(1:23), Einrichtung = sort(unique(namen)))
Labels = data.frame(center = c(1:26), Einrichtung = sort(unique(namen)))
data = merge(data, Labels, by = "Einrichtung")
data
data1$Einrichtung
table(data1$Einrichtung)
# Daten einlesen
Einrichtungen <- c("MA_Industriestraße",
"MA_Spinelli",
"Moosfeld",
#  "MU_AHE_Flughafen", rauslassen, da Abschiebehafteinrichtung
"MU_Funkkaserne",
"Osterhofen",
"Schweinfurt",
"Schwetzingen",
"Stephansposching",
"Waldkraiburg",
#  "Wuerzburg", rauslassen, da Gemeinschaftsunterkunft
"Deggendorf",
"Durlacher_Allee",
"Freiburg",
"Fuerstenfeldbruck",
"HD_PHV",
"Hengersberg",
"HH_HH",
"HH_Poststraße",
"HH_Sportallee",
"Ingolstadt",
"Lotte_Branz_Straße",
"Garmisch-Partenkirchen",
#neu seit 2023:  "Musenbergstraße",
#  "KA_Eggenstein", keine Daten
"Felsstraße",
"Flughafen",
"Funkkaserne",
"Maria_Probst_Straße")
length(Einrichtungen)
library(plyr)
Pfad <- "P:/stat_mod/Projekte/Sentinel Surveillance/longauswertung/neue_Daten/"
# Daten einlesen
Einrichtungen <- c("MA_Industriestraße",
"MA_Spinelli",
"Moosfeld",
#  "MU_AHE_Flughafen", rauslassen, da Abschiebehafteinrichtung
"MU_Funkkaserne",
"Osterhofen",
"Schweinfurt",
"Schwetzingen",
"Stephansposching",
"Waldkraiburg",
#  "Wuerzburg", rauslassen, da Gemeinschaftsunterkunft
"Deggendorf",
"Durlacher_Allee",
"Freiburg",
"Fuerstenfeldbruck",
"HD_PHV",
"Hengersberg",
"HH_HH",
"HH_Poststraße",
"HH_Sportallee",
"Ingolstadt",
"Lotte_Branz_Straße",
"Garmisch-Partenkirchen",
#neu seit 2023:  "Musenbergstraße",
#  "KA_Eggenstein", keine Daten
# "Tübingen", # keine Daten
"Felsstraße",
"Flughafen",
"Funkkaserne",
"Maria_Probst_Straße")
library(readr)
Legende <- read_delim("P:/stat_mod/Projekte/Sentinel Surveillance/longauswertung/Daten/Legende.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
variablen <- unique(Legende$Indikator_ID[grepl( "^morb", Legende$Indikator_ID)])
variablen <- variablen[variablen != "morb_freq" &
variablen != "morb_psych_d_u" &
variablen != "morb_cov_acquired" &
variablen != "morb_cov_con" &
variablen != "morb_cov_imp" &
variablen != "morb_cov_pos" &
variablen != "morb_cov_screen" &
variablen != "morb_cov_sus" &
variablen != "morb_cov_sympt" &
variablen != "morb_extern_d" &
variablen != "morb_inf_resist"]
data1 <- NULL
Einrichtung = Einrichtungen[1]; variable = variablen[1]
for (Einrichtung in Einrichtungen) {
cluster <- "?"
if (Einrichtung == "HD_PHV"|
Einrichtung == "HH_HH"|
Einrichtung == "Lotte_Branz_Straße"|
Einrichtung == "Durlacher_Allee"|
Einrichtung == "Schwetzingen"){
cluster = "RZ"
}else{
if (Einrichtung ==
"Schweinfurt"|
Einrichtung ==
"Ingolstadt"|
Einrichtung ==
"Deggendorf"|
Einrichtung ==
"MA_Industriestraße"|
Einrichtung ==
"MA_Spinelli"|
Einrichtung ==
"Moosfeld"|
Einrichtung ==
"MU_Funkkaserne"|
Einrichtung ==
"Osterhofen"|
Einrichtung ==
"Stephansposching"|
Einrichtung ==
"Waldkraiburg"|
Einrichtung ==
"Freiburg"|
Einrichtung ==
"Fuerstenfeldbruck"|
Einrichtung ==
"Hengersberg"|
Einrichtung ==
"HH_Poststraße"|
Einrichtung ==
"HH_Sportallee"|
Einrichtung ==
"Garmisch-Partenkirchen"){
cluster = "AD"
}else{
cluster = NA
}
}
load(paste0(Pfad, Einrichtung, "/tab_pop_pat_ag.Rdata"))
load(paste0(Pfad, Einrichtung, "/tab_pop_pat_g.Rdata"))
load(paste0(Pfad, Einrichtung, "/tab_pop_pat_h.Rdata"))
# länder, die >5 mal unter den 10 häufigsten Ländern waren
# TO DO: Länderanteile berechnen ohne NAS!
if(!is.null(as.data.frame(tab_pop_pat_h)$NG)){
ng <-   as.data.frame(tab_pop_pat_h)$NG/as.data.frame(tab_pop_pat_h)$Summe
}else{
ng <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$AF)){
af <-   as.data.frame(tab_pop_pat_h)$AF/as.data.frame(tab_pop_pat_h)$Summe
}else{
af <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$SY)){
sy <-   as.data.frame(tab_pop_pat_h)$SY/as.data.frame(tab_pop_pat_h)$Summe
}else{
sy <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$IQ)){
iq <-   as.data.frame(tab_pop_pat_h)$IQ/as.data.frame(tab_pop_pat_h)$Summe
}else{
iq <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$TR)){
tr <-   as.data.frame(tab_pop_pat_h)$TR/as.data.frame(tab_pop_pat_h)$Summe
}else{
tr <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$IR)){
ir <-   as.data.frame(tab_pop_pat_h)$IR/as.data.frame(tab_pop_pat_h)$Summe
}else{
ir <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$SO)){
so <-   as.data.frame(tab_pop_pat_h)$SO/as.data.frame(tab_pop_pat_h)$Summe
}else{
so <- 0
}
if(!is.null(as.data.frame(tab_pop_pat_h)$UA)){
ua <-   as.data.frame(tab_pop_pat_h)$UA/as.data.frame(tab_pop_pat_h)$Summe
}else{
ua <- 0
}
for(variable in variablen){
load(paste0(Pfad, Einrichtung, "/tab_",variable, "_pat_g.Rdata"))
if(variable != "morb_kardio_hyperton" &
variable != "morb_met_chol"){
load(paste0(Pfad, Einrichtung, "/tab_",variable, "_pat_ag.Rdata"))
}
}
data1 <- rbind(data1,
data.frame(Einrichtung = Einrichtung,
cluster = cluster,
Monat = names(tab_pop_pat_g[,1]),
#   n_g = tab_pop_pat_g[,4],
#   n_ag = tab_pop_pat_ag[,4],
n0 = tab_pop_pat_g[,4] + tab_pop_pat_g[,3], # Fehler: NAs<3 wird auf 0 gesetzt?
n1 = tab_pop_pat_ag[,4] + tab_pop_pat_ag[,3], # Fehler: NAs<3 wird auf 0 gesetzt?
Maennlich = tab_pop_pat_g[,1],
MaennlichA = tab_pop_pat_g[,1]/tab_pop_pat_g[,4]*100, # Anteil männlich in %
MaennlichA10 = tab_pop_pat_g[,1]/tab_pop_pat_g[,4]*10,# Anteil männlich in 10erSchritten
Erwachsen = tab_pop_pat_ag[,1],
ErwachsenA = tab_pop_pat_ag[,1]/tab_pop_pat_ag[,4]*100, # Anteil erwachsen in %
ErwachsenA10 = tab_pop_pat_ag[,1]/tab_pop_pat_ag[,4]*10,# Anteil erwachsen in 10erSchritten
Weiblich = tab_pop_pat_g[,2],
WeiblichA = tab_pop_pat_g[,2]/tab_pop_pat_g[,4],
Kind = tab_pop_pat_ag[,2],
KindA = tab_pop_pat_ag[,2]/tab_pop_pat_ag[,4],
NGA = ng,
AFA = af,
SYA = sy,
IQA = iq,
TRA = tr,
IRA = ir,
SOA = so,
UAA = ua,
morb_behin = pmax(tab_morb_behin_pat_g[, 4] + tab_morb_behin_pat_g[, 3],
tab_morb_behin_pat_ag[, 4] + tab_morb_behin_pat_ag[, 3]),
morb_derma = pmax(tab_morb_derma_pat_g[, 4] + tab_morb_derma_pat_g[, 3],
tab_morb_derma_pat_ag[, 4] + tab_morb_derma_pat_ag[, 3]),
morb_extern_folg = pmax(tab_morb_extern_folg_pat_g[, 4] + tab_morb_extern_folg_pat_g[, 3],
tab_morb_extern_folg_pat_ag[, 4] + tab_morb_extern_folg_pat_ag[, 3]),
morb_gastro = pmax(tab_morb_gastro_pat_g[, 4] + tab_morb_gastro_pat_g[, 3],
tab_morb_gastro_pat_ag[, 4] + tab_morb_gastro_pat_ag[, 3]),
morb_haem = pmax(tab_morb_haem_pat_g[, 4] + tab_morb_haem_pat_g[, 3],
tab_morb_haem_pat_ag[, 4] + tab_morb_haem_pat_ag[, 3]),
morb_inf_d = pmax(tab_morb_inf_d_pat_g[, 4] + tab_morb_inf_d_pat_g[, 3],
tab_morb_inf_d_pat_ag[, 4] + tab_morb_inf_d_pat_ag[, 3]),
morb_inf_ifsg = pmax(tab_morb_inf_ifsg_pat_g[, 4] + tab_morb_inf_ifsg_pat_g[, 3],
tab_morb_inf_ifsg_pat_ag[, 4] + tab_morb_inf_ifsg_pat_ag[, 3]),
morb_kardio_d = pmax(tab_morb_kardio_d_pat_g[, 4] + tab_morb_kardio_d_pat_g[, 3],
tab_morb_kardio_d_pat_ag[, 4] + tab_morb_kardio_d_pat_ag[, 3]),
morb_kardio_hyperton = pmax(tab_morb_kardio_hyperton_pat_g[, 4] + tab_morb_kardio_hyperton_pat_g[, 3]),
#  tab_morb_kardio_hyperton_pat_ag[, 4] + tab_morb_kardio_hyperton_pat_ag[, 3]),
morb_met_bmi = pmax(tab_morb_met_bmi_pat_g[, 4] + tab_morb_met_bmi_pat_g[, 3],
tab_morb_met_bmi_pat_ag[, 4] + tab_morb_met_bmi_pat_ag[, 3]),
morb_met_chol = pmax(tab_morb_met_chol_pat_g[, 4] + tab_morb_met_chol_pat_g[, 3]),
#  tab_morb_met_chol_pat_ag[, 4] + tab_morb_met_chol_pat_ag[, 3]),
morb_met_d = pmax(tab_morb_met_d_pat_g[, 4] + tab_morb_met_d_pat_g[, 3],
tab_morb_met_d_pat_ag[, 4] + tab_morb_met_d_pat_ag[, 3]),
morb_met_dm = pmax(tab_morb_met_dm_pat_g[, 4] + tab_morb_met_dm_pat_g[, 3],
tab_morb_met_dm_pat_ag[, 4] + tab_morb_met_dm_pat_ag[, 3]),
morb_muskel = pmax(tab_morb_muskel_pat_g[, 4] + tab_morb_muskel_pat_g[, 3],
tab_morb_muskel_pat_ag[, 4] + tab_morb_muskel_pat_ag[, 3]),
morb_neopl = pmax(tab_morb_neopl_pat_g[, 4] + tab_morb_neopl_pat_g[, 3],
tab_morb_neopl_pat_ag[, 4] + tab_morb_neopl_pat_ag[, 3]),
morb_neuro = pmax(tab_morb_neuro_pat_g[, 4] + tab_morb_neuro_pat_g[, 3],
tab_morb_neuro_pat_ag[, 4] + tab_morb_neuro_pat_ag[, 3]),
morb_ohr = pmax(tab_morb_ohr_pat_g[, 4] + tab_morb_ohr_pat_g[, 3],
tab_morb_ohr_pat_ag[, 4] + tab_morb_ohr_pat_ag[, 3]),
morb_opht = pmax(tab_morb_opht_pat_g[, 4] + tab_morb_opht_pat_g[, 3],
tab_morb_opht_pat_ag[, 4] + tab_morb_opht_pat_ag[, 3]),
morb_perinatal = pmax(tab_morb_perinatal_pat_g[, 4] + tab_morb_perinatal_pat_g[, 3],
tab_morb_perinatal_pat_ag[, 4] + tab_morb_perinatal_pat_ag[, 3]),
morb_pregn_d = pmax(tab_morb_pregn_d_pat_g[, 4] + tab_morb_pregn_d_pat_g[, 3],
tab_morb_pregn_d_pat_ag[, 4] + tab_morb_pregn_d_pat_ag[, 3]),
morb_psych_benzo = pmax(tab_morb_psych_benzo_pat_g[, 4] + tab_morb_psych_benzo_pat_g[, 3],
tab_morb_psych_benzo_pat_ag[, 4] + tab_morb_psych_benzo_pat_ag[, 3]),
morb_psych_d = pmax(tab_morb_psych_d_pat_g[, 4] + tab_morb_psych_d_pat_g[, 3],
tab_morb_psych_d_pat_ag[, 4] + tab_morb_psych_d_pat_ag[, 3]),
morb_psych_t = pmax(tab_morb_psych_t_pat_g[, 4] + tab_morb_psych_t_pat_g[, 3],
tab_morb_psych_t_pat_ag[, 4] + tab_morb_psych_t_pat_ag[, 3]),
morb_pulmo = pmax(tab_morb_pulmo_pat_g[, 4] + tab_morb_pulmo_pat_g[, 3],
tab_morb_pulmo_pat_ag[, 4] + tab_morb_pulmo_pat_ag[, 3]),
morb_uro = pmax(tab_morb_uro_pat_g[, 4] + tab_morb_uro_pat_g[, 3],
tab_morb_uro_pat_ag[, 4] + tab_morb_uro_pat_ag[, 3])
))
}
